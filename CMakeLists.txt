
cmake_minimum_required(VERSION 3.22)

if (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})

    project(RCProtocolsTest C)

    # Setup compiler settings
    set(CMAKE_C_STANDARD 11)
    set(CMAKE_C_STANDARD_REQUIRED ON)
    set(CMAKE_C_EXTENSIONS ON)
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    option(BUILD_SHARED_LIBS "Build using shared libraries" OFF)

    include(FetchContent)

    # Fetch and build CMocka
    SET(CMAKE_TLS_VERIFY FALSE)
    
    #set(FETCHCONTENT_FULLY_DISCONNECTED ON CACHE BOOL "work offline" FORCE)

    set(WITH_EXAMPLES OFF CACHE BOOL "CMocka: Build examples" FORCE)
    set(UNIT_TESTING OFF CACHE BOOL "CMocka: Build with unit testing" FORCE)
    set(PICKY_DEVELOPER OFF CACHE BOOL "CMocka: Build with picky developer flags" FORCE)

    FetchContent_Declare(
        cmocka
        GIT_REPOSITORY https://git.cryptomilk.org/projects/cmocka.git
        GIT_TAG        master
        GIT_SHALLOW    1
    )

    FetchContent_MakeAvailable(cmocka)

    # Find math library (needed for compilation under Ubuntu)
    if (NOT WIN32)
        find_library(MATH_LIBRARY m)
    else()
        set(MATH_LIBRARY "")
    endif()

    # Set user definitions
    set(user_DEFS
        $<$<AND:$<CONFIG:Debug>,$<COMPILE_LANGUAGE:C>>:DEBUG>
    )

    # Compiler options
    set(compiler_OPTS
        #-fdiagnostics-color=always
        -fno-builtin
        -Wall
        -Wextra
        -Wpedantic
        -Wno-unused-parameter
        --coverage
        -O0
        -g3
    )

   
    # Enable CTest testing functionality
    set(CMAKE_CTEST_ARGUMENTS "-j 8" "--rerun-failed" "--output-on-failure" "--verbose")
    include(CTest)
    enable_testing()

    function(add_protocol_test PROTOCOL TARGET_NAME DEFS)
        add_executable(${TARGET_NAME}
            ${CMAKE_SOURCE_DIR}/${PROTOCOL}/${PROTOCOL}.c
            ${CMAKE_SOURCE_DIR}/tests/test_${PROTOCOL}.c
        )
        target_include_directories(${TARGET_NAME} PRIVATE
            ${CMAKE_SOURCE_DIR}/${PROTOCOL}
        )
        target_compile_definitions(${TARGET_NAME} PRIVATE ${USER_DEFS} ${DEFS})
        target_compile_options(${TARGET_NAME} PRIVATE ${compiler_OPTS})
        target_link_libraries(${TARGET_NAME} PRIVATE cmocka ${MATH_LIBRARY})
        target_link_options(${TARGET_NAME} PRIVATE --coverage)
        add_test(NAME ${TARGET_NAME} COMMAND ${TARGET_NAME})
    endfunction()

    # SymaX tests
    # TX minimal
    add_protocol_test(SymaX test_SymaX_tx_minimal "SYMAX_CONFIG_TX;SYMAX_SKIP_PREBIND=1;SYMAX_ENABLE_FLAGS=0;SYMAX_TEST_ID")
    # TX complete: TX tests + flags & trim
    add_protocol_test(SymaX test_SymaX_tx_complete "SYMAX_CONFIG_TX;SYMAX_ENABLE_FLAGS;SYMAX_ENABLE_TRIM_DATA;SYMAX_ENABLE_STATS;SYMAX_TEST_ID")
    # RX minimal
    add_protocol_test(SymaX test_SymaX_rx_minimal "SYMAX_CONFIG_RX;SYMAX_SKIP_PREBIND=1;SYMAX_ENABLE_FLAGS=0;SYMAX_TEST_ID")
    # RX complete: RX tests + all RX-related features
    add_protocol_test(SymaX test_SymaX_rx_complete "SYMAX_CONFIG_RX;SYMAX_ENABLE_FRESHNESS_CHECK;SYMAX_ENABLE_STATS;SYMAX_ENABLE_FLAGS;SYMAX_ENABLE_TRIM_DATA;SYMAX_TEST_ID")
    # TX and RX combined tests
    add_protocol_test(SymaX test_SymaX_mixed_tx_rx "SYMAX_CONFIG_TX;SYMAX_CONFIG_RX;SYMAX_ENABLE_STATS;SYMAX_ENABLE_FLAGS;SYMAX_ENABLE_TRIM_DATA;SYMAX_TEST_ID")


    # iBus tests
    # RX minimal: RC only, no telemetry and no stats/freshness
    add_protocol_test(iBus test_iBus_rx_minimal "IBUS_ENABLE_TELEMETRY=0;IBUS_ENABLE_STATS=0;IBUS_ENABLE_FRESHNESS_CHECK=0")
    # RX mid: RC with telemetry and no stats/freshness
    add_protocol_test(iBus test_iBus_rx_tel "IBUS_ENABLE_TELEMETRY=1;IBUS_ENABLE_STATS=0;IBUS_ENABLE_FRESHNESS_CHECK=0")
    # RX full: RC with no telemetry and stats/freshness
    add_protocol_test(iBus test_iBus_rx_stats_fresh "IBUS_ENABLE_TELEMETRY=0;IBUS_ENABLE_STATS=1;IBUS_ENABLE_FRESHNESS_CHECK=1")
    # RX full: RC with telemetry and stats/freshness
    add_protocol_test(iBus test_iBus_rx_full "IBUS_ENABLE_TELEMETRY=1;IBUS_ENABLE_STATS=1;IBUS_ENABLE_FRESHNESS_CHECK=1")

    # CRSF tests
    # TX minimal: RC only, no stats/freshness
    add_protocol_test(CRSF test_CRSF_tx_minimal "CRSF_CONFIG_TX;CRSF_ENABLE_STATS=0;CRSF_ENABLE_FRESHNESS_CHECK=0;CRSF_ENABLE_ADDRESS_VALIDATION=1;CRSF_USE_CRC_CALCULATION=1;CRSF_TEL_ENABLE_GPS=0;CRSF_TEL_ENABLE_GPS_TIME=0;CRSF_TEL_ENABLE_GPS_EXTENDED=0;CRSF_TEL_ENABLE_VARIO=0;CRSF_TEL_ENABLE_BATTERY_SENSOR=0;CRSF_TEL_ENABLE_BAROALT_VSPEED=0;CRSF_TEL_ENABLE_AIRSPEED=0;CRSF_TEL_ENABLE_HEARTBEAT=0;CRSF_TEL_ENABLE_RPM=0;CRSF_TEL_ENABLE_TEMPERATURE=0;CRSF_TEL_ENABLE_VOLTAGES=0;CRSF_TEL_ENABLE_VTX=0;CRSF_TEL_ENABLE_LINK_STATISTICS=0;CRSF_ENABLE_RC_CHANNELS=1;CRSF_TEL_ENABLE_LINK_STATISTICS_RX=0;CRSF_TEL_ENABLE_LINK_STATISTICS_TX=0;CRSF_TEL_ENABLE_ATTITUDE=0;CRSF_TEL_ENABLE_MAVLINK_FC=0;CRSF_TEL_ENABLE_FLIGHT_MODE=0;CRSF_TEL_ENABLE_ESP_NOW_MESSAGES=0;CRSF_TEL_ENABLE_PARAMETER_GROUP=0;CRSF_ENABLE_COMMAND=0;CRSF_TEL_ENABLE_MAVLINK_ENVELOPE=0;CRSF_TEL_ENABLE_MAVLINK_STATUS=0")
    # TX full: all telemetry encoders + command builder
    add_protocol_test(CRSF test_CRSF_tx_full "CRSF_CONFIG_TX;CRSF_ENABLE_STATS=1;CRSF_ENABLE_FRESHNESS_CHECK=1;CRSF_ENABLE_ADDRESS_VALIDATION=1;CRSF_USE_CRC_CALCULATION=0;CRSF_TEL_ENABLE_GPS=1;CRSF_TEL_ENABLE_GPS_TIME=1;CRSF_TEL_ENABLE_GPS_EXTENDED=1;CRSF_TEL_ENABLE_VARIO=1;CRSF_TEL_ENABLE_BATTERY_SENSOR=1;CRSF_TEL_ENABLE_BAROALT_VSPEED=1;CRSF_TEL_ENABLE_AIRSPEED=1;CRSF_TEL_ENABLE_HEARTBEAT=1;CRSF_TEL_ENABLE_RPM=1;CRSF_TEL_ENABLE_TEMPERATURE=1;CRSF_TEL_ENABLE_VOLTAGES=1;CRSF_TEL_ENABLE_VTX=1;CRSF_TEL_ENABLE_LINK_STATISTICS=1;CRSF_ENABLE_RC_CHANNELS=1;CRSF_TEL_ENABLE_LINK_STATISTICS_RX=1;CRSF_TEL_ENABLE_LINK_STATISTICS_TX=1;CRSF_TEL_ENABLE_ATTITUDE=1;CRSF_TEL_ENABLE_MAVLINK_FC=1;CRSF_TEL_ENABLE_FLIGHT_MODE=1;CRSF_TEL_ENABLE_ESP_NOW_MESSAGES=1;CRSF_TEL_ENABLE_PARAMETER_GROUP=1;CRSF_ENABLE_COMMAND=1;CRSF_TEL_ENABLE_MAVLINK_ENVELOPE=1;CRSF_TEL_ENABLE_MAVLINK_STATUS=1")
    # RX minimal: RC only
    add_protocol_test(CRSF test_CRSF_rx_minimal "CRSF_CONFIG_RX;CRSF_ENABLE_STATS=0;CRSF_ENABLE_FRESHNESS_CHECK=0;CRSF_ENABLE_ADDRESS_VALIDATION=1;CRSF_USE_CRC_CALCULATION=1;CRSF_TEL_ENABLE_GPS=0;CRSF_TEL_ENABLE_GPS_TIME=0;CRSF_TEL_ENABLE_GPS_EXTENDED=0;CRSF_TEL_ENABLE_VARIO=0;CRSF_TEL_ENABLE_BATTERY_SENSOR=0;CRSF_TEL_ENABLE_BAROALT_VSPEED=0;CRSF_TEL_ENABLE_AIRSPEED=0;CRSF_TEL_ENABLE_HEARTBEAT=0;CRSF_TEL_ENABLE_RPM=0;CRSF_TEL_ENABLE_TEMPERATURE=0;CRSF_TEL_ENABLE_VOLTAGES=0;CRSF_TEL_ENABLE_VTX=0;CRSF_TEL_ENABLE_LINK_STATISTICS=0;CRSF_ENABLE_RC_CHANNELS=1;CRSF_TEL_ENABLE_LINK_STATISTICS_RX=0;CRSF_TEL_ENABLE_LINK_STATISTICS_TX=0;CRSF_TEL_ENABLE_ATTITUDE=0;CRSF_TEL_ENABLE_MAVLINK_FC=0;CRSF_TEL_ENABLE_FLIGHT_MODE=0;CRSF_TEL_ENABLE_ESP_NOW_MESSAGES=0;CRSF_TEL_ENABLE_PARAMETER_GROUP=0;CRSF_ENABLE_COMMAND=0;CRSF_TEL_ENABLE_MAVLINK_ENVELOPE=0;CRSF_TEL_ENABLE_MAVLINK_STATUS=0")
    # RX full: all telemetry parsing + command callback
    add_protocol_test(CRSF test_CRSF_rx_full "CRSF_CONFIG_RX;CRSF_ENABLE_STATS=1;CRSF_ENABLE_FRESHNESS_CHECK=1;CRSF_ENABLE_ADDRESS_VALIDATION=1;CRSF_USE_CRC_CALCULATION=0;CRSF_TEL_ENABLE_GPS=1;CRSF_TEL_ENABLE_GPS_TIME=1;CRSF_TEL_ENABLE_GPS_EXTENDED=1;CRSF_TEL_ENABLE_VARIO=1;CRSF_TEL_ENABLE_BATTERY_SENSOR=1;CRSF_TEL_ENABLE_BAROALT_VSPEED=1;CRSF_TEL_ENABLE_AIRSPEED=1;CRSF_TEL_ENABLE_HEARTBEAT=1;CRSF_TEL_ENABLE_RPM=1;CRSF_TEL_ENABLE_TEMPERATURE=1;CRSF_TEL_ENABLE_VOLTAGES=1;CRSF_TEL_ENABLE_VTX=1;CRSF_TEL_ENABLE_LINK_STATISTICS=1;CRSF_ENABLE_RC_CHANNELS=1;CRSF_TEL_ENABLE_LINK_STATISTICS_RX=1;CRSF_TEL_ENABLE_LINK_STATISTICS_TX=1;CRSF_TEL_ENABLE_ATTITUDE=1;CRSF_TEL_ENABLE_MAVLINK_FC=1;CRSF_TEL_ENABLE_FLIGHT_MODE=1;CRSF_TEL_ENABLE_ESP_NOW_MESSAGES=1;CRSF_TEL_ENABLE_PARAMETER_GROUP=1;CRSF_ENABLE_COMMAND=1;CRSF_TEL_ENABLE_MAVLINK_ENVELOPE=1;CRSF_TEL_ENABLE_MAVLINK_STATUS=1")
    # Mixed TX+RX (round-trips and broadest coverage)
    add_protocol_test(CRSF test_CRSF_mixed "CRSF_CONFIG_TX;CRSF_CONFIG_RX;CRSF_ENABLE_STATS=1;CRSF_ENABLE_FRESHNESS_CHECK=1;CRSF_ENABLE_ADDRESS_VALIDATION=1;CRSF_USE_CRC_CALCULATION=0;CRSF_TEL_ENABLE_GPS=1;CRSF_TEL_ENABLE_GPS_TIME=1;CRSF_TEL_ENABLE_GPS_EXTENDED=1;CRSF_TEL_ENABLE_VARIO=1;CRSF_TEL_ENABLE_BATTERY_SENSOR=1;CRSF_TEL_ENABLE_BAROALT_VSPEED=1;CRSF_TEL_ENABLE_AIRSPEED=1;CRSF_TEL_ENABLE_HEARTBEAT=1;CRSF_TEL_ENABLE_RPM=1;CRSF_TEL_ENABLE_TEMPERATURE=1;CRSF_TEL_ENABLE_VOLTAGES=1;CRSF_TEL_ENABLE_VTX=1;CRSF_TEL_ENABLE_LINK_STATISTICS=1;CRSF_ENABLE_RC_CHANNELS=1;CRSF_TEL_ENABLE_LINK_STATISTICS_RX=1;CRSF_TEL_ENABLE_LINK_STATISTICS_TX=1;CRSF_TEL_ENABLE_ATTITUDE=1;CRSF_TEL_ENABLE_MAVLINK_FC=1;CRSF_TEL_ENABLE_FLIGHT_MODE=1;CRSF_TEL_ENABLE_ESP_NOW_MESSAGES=1;CRSF_TEL_ENABLE_PARAMETER_GROUP=1;CRSF_ENABLE_COMMAND=1;CRSF_TEL_ENABLE_MAVLINK_ENVELOPE=1;CRSF_TEL_ENABLE_MAVLINK_STATUS=1")

    #add_executable(test_CMD
    #    ${CMAKE_SOURCE_DIR}/CRSF/CRSF.c
    #    ${CMAKE_SOURCE_DIR}/tests/test_CRSF_command.c
    #)
    #target_include_directories(test_CMD PRIVATE
    #    ${CMAKE_SOURCE_DIR}/CRSF
    #)
    #target_compile_definitions(test_CMD PRIVATE ${USER_DEFS} "CRSF_CONFIG_TX;CRSF_CONFIG_RX;CRSF_ENABLE_STATS=1;CRSF_ENABLE_FRESHNESS_CHECK=1;CRSF_ENABLE_ADDRESS_VALIDATION=1;CRSF_USE_CRC_CALCULATION=0;CRSF_TEL_ENABLE_GPS=1;CRSF_TEL_ENABLE_GPS_TIME=1;CRSF_TEL_ENABLE_GPS_EXTENDED=1;CRSF_TEL_ENABLE_VARIO=1;CRSF_TEL_ENABLE_BATTERY_SENSOR=1;CRSF_TEL_ENABLE_BAROALT_VSPEED=1;CRSF_TEL_ENABLE_AIRSPEED=1;CRSF_TEL_ENABLE_HEARTBEAT=1;CRSF_TEL_ENABLE_RPM=1;CRSF_TEL_ENABLE_TEMPERATURE=1;CRSF_TEL_ENABLE_VOLTAGES=1;CRSF_TEL_ENABLE_VTX=1;CRSF_TEL_ENABLE_LINK_STATISTICS=1;CRSF_ENABLE_RC_CHANNELS=1;CRSF_TEL_ENABLE_LINK_STATISTICS_RX=1;CRSF_TEL_ENABLE_LINK_STATISTICS_TX=1;CRSF_TEL_ENABLE_ATTITUDE=1;CRSF_TEL_ENABLE_MAVLINK_FC=1;CRSF_TEL_ENABLE_FLIGHT_MODE=1;CRSF_TEL_ENABLE_ESP_NOW_MESSAGES=1;CRSF_TEL_ENABLE_PARAMETER_GROUP=1;CRSF_ENABLE_COMMAND=1;CRSF_TEL_ENABLE_MAVLINK_ENVELOPE=1;CRSF_TEL_ENABLE_MAVLINK_STATUS=1")
    #target_compile_options(test_CMD PRIVATE ${compiler_OPTS})
    #target_link_libraries(test_CMD PRIVATE cmocka ${MATH_LIBRARY})
    #target_link_options(test_CMD PRIVATE --coverage)
    #add_test(NAME test_CMD COMMAND test_CMD)


else()
    # 
    # This file provides set of variables for end user
    # and also generates one (or more) libraries, that can be added to the project using target_link_libraries(...)
    #
    # Before this file is included to the root CMakeLists file (using add_subdirectory() function), user can set some variables:
    #
    # libName_COMPILE_OPTS: If defined, it provide compiler options for generated library.
    # libName_COMPILE_DEFS: If defined, it provides "-D" definitions to the library build
    #
    set (libName RCProtocols)

    option(BUILD_SYMAX "Build the SymaX library" ON)
    option(BUILD_IBUS "Build the iBus library" ON)
    option(BUILD_CRSF "Build the CRSF library" ON)

    # Setup include directories    
    set(${libName}_inc "")
    if(BUILD_SYMAX)
        list(APPEND ${libName}_inc ${CMAKE_CURRENT_LIST_DIR}/SymaX/)
    endif()
    if(BUILD_IBUS)
        list(APPEND ${libName}_inc ${CMAKE_CURRENT_LIST_DIR}/iBus/)
    endif()
    if(BUILD_CRSF)
        list(APPEND ${libName}_inc ${CMAKE_CURRENT_LIST_DIR}/CRSF/)
    endif()

    # Setup source directories
    set(${libName}_src "")
    if(BUILD_SYMAX)
        list(APPEND ${libName}_src ${CMAKE_CURRENT_LIST_DIR}/SymaX/SymaX.c)
    endif()
    if(BUILD_IBUS)
        list(APPEND ${libName}_src ${CMAKE_CURRENT_LIST_DIR}/iBus/iBUS.c)
    endif()
    if(BUILD_CRSF)
        list(APPEND ${libName}_src ${CMAKE_CURRENT_LIST_DIR}/CRSF/CRSF.c)
    endif()

    # Register library to the system
    add_library(${libName} STATIC)
    target_sources(${libName} PRIVATE ${${libName}_src})
    target_include_directories(${libName} PUBLIC ${${libName}_inc})
    target_compile_options(${libName} PRIVATE ${${libName}_COMPILE_OPTS})
    target_compile_definitions(${libName} PUBLIC ${${libName}_COMPILE_DEFS})
    
endif()
